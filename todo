NEXT:
- Gotta add production symbol for "abstract" productions
- Hmm, the LHS trick may not work.  What happens at run time when I'm expecting a BOOLEAN,
  and a production that claims to return a BOOLEAN actually returns TRUE?  Then I get a parse error.
- I may need to do subtags on the LHS too, to capture the case of:
    BOOLEAN <- foo
	 VOID <- if FALSE then ...
	 VOID <- if TRUE  then ...

	 This is that dynamic typing thing all over again I think.  In a statically-typed language,
	 I'd have to declare VOID <- if BOOLEAN then ... just to declare that BOOLEAN supports this
	 interface.
- Need better error message when an implied production's action is called

Other:
- Implement tail call elimination
- Variables + tail calls can implement for-loops
- Implement objects
  - Instantiation - how can I write these productions?  What's the lhs?
  - Field get/set
  - Array element get/set
    - How do arrays differ from normal objects?  Just tag :ARRAY?
- Play around with things like :PRODUCTION and :TOKEN_BLOCK as first-class values
- Create a token stream out of objects and solve a problem by parsing it
- Tighten up semantics:
  - Lexical scope vs dynamic scope?
  - Parse every piece of program code just once if possible
- Take command line args and file IO
  - System calls in general?  Native methods?
- Expose associativity in the language
- Can we get rid of the curly braces?
- Two reduces with the same action (and possibly same RHS?) should not conflict.
    Not sure how to do that because Grammar doesn't know the actions.
- Figure out what I'm doing with if statements in the brave new world where "return" is unnecessary
- Wiki syntax thing


Ideas
- Maybe "def" can stay the way it is, and can modify grammars incrementally.
  Modules can have a syntax senction that declares new productions and an
  implementation that provides bodies.  This is still very single-pass-ish but
  I don't see what else I can do if I can't even know to parse a section of
  text looking for the productions used to parse it!

DONE
- Looks like augmenting the sst and automaton still isn't enough.  I probably need
  to augment the item sets too.  Need to think of this form first principles as
  though there were productions of the form SUPER -> SUB everywhere.  (What
  about SUB->SUPER?  Should I worry about those?)
  - Solution: I just had to augment it earlier as well as later.  (Can I get rid of some of the sst_augment calls?)
- How do I deal with token block recording, where I will literally have a super-tag token pushed (instead of one of the subtags it represents)?
  - Solution: abstract representative reductions for those.  (I half-implemented this, and it already works.  Not sure how.)
- PROBLEM: Multiple runs of sst_propagate are infecting sibling classes with each others' bits
  - Solution: sst_propagate isn't going to work
- Instead of doing subtags on the right-hand side, try supertags on the left-hand side
- The production symbols don't seem to be copied properly when augmenting a grammar
  - Fixed
- I was editing an outer grammer.  Whoopsie
